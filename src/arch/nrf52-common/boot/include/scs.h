/*******************************************************************************/
/*  © Université de Lille, The Pip Development Team (2015-2022)                */
/*                                                                             */
/*  This software is a computer program whose purpose is to run a minimal,     */
/*  hypervisor relying on proven properties such as memory isolation.          */
/*                                                                             */
/*  This software is governed by the CeCILL license under French law and       */
/*  abiding by the rules of distribution of free software.  You can  use,      */
/*  modify and/ or redistribute the software under the terms of the CeCILL     */
/*  license as circulated by CEA, CNRS and INRIA at the following URL          */
/*  "http://www.cecill.info".                                                  */
/*                                                                             */
/*  As a counterpart to the access to the source code and  rights to copy,     */
/*  modify and redistribute granted by the license, users are provided only    */
/*  with a limited warranty  and the software's author,  the holder of the     */
/*  economic rights,  and the successive licensors  have only  limited         */
/*  liability.                                                                 */
/*                                                                             */
/*  In this respect, the user's attention is drawn to the risks associated     */
/*  with loading,  using,  modifying and/or developing or reproducing the      */
/*  software by the user in light of its specific status of free software,     */
/*  that may mean  that it is complicated to manipulate,  and  that  also      */
/*  therefore means  that it is reserved for developers  and  experienced      */
/*  professionals having in-depth computer knowledge. Users are therefore      */
/*  encouraged to load and test the software's suitability as regards their    */
/*  requirements in conditions enabling the security of their systems and/or   */
/*  data to be ensured and,  more generally, to use and operate it in the      */
/*  same conditions as regards security.                                       */
/*                                                                             */
/*  The fact that you are presently reading this means that you have had       */
/*  knowledge of the CeCILL license and that you accept its terms.             */
/*******************************************************************************/

#ifndef __SCS_H__
#define __SCS_H__

#include <stdlib.h>

/*!
 * Structure representing the ICSR register.
 */
typedef union scs_icsr_reg_u
{
	/*!
	 * \brief Read or write the ICSR register as a 32-bit value.
	 */
	uint32_t as_uint32_t;

	struct
	{
		/*!
		 * \brief The exception number of the current executing
		 *        exception.
		 */
		uint32_t VECTACTIVE : 9;

		/*!
		 * \brief Reserved.
		 */
		uint32_t RESERVED_0 : 2;

		/*!
		 * \brief In Handler mode, indicates whether there is an
		 *        active exception other than the exception
		 *        indicated by the current value of the IPSR.
		 */
		uint32_t RETTOBASE : 1;

		/*!
		 * \brief The exception number of the highest priority
		 *        pending and enabled interrupt.
		 */
		uint32_t VECTPENDING : 9;

		/*!
		 * \brief Reserved.
		 */
		uint32_t RESERVED_1 : 1;

		/*!
		 * \brief Indicates whether an external interrupt,
		 *        generated by the NVIC, is pending.
		 */
		uint32_t ISRPENDING : 1;

		/*!
		 * \brief Indicates whether a pending exception will be
		 *        serviced on exit from debug halt state.
		 */
		uint32_t ISRPREEMPT : 1;

		/*!
		 * \brief Reserved.
		 */
		uint32_t RESERVED_2 : 1;

		/*!
		 * \brief Removes the pending status of the SysTick
		 *        exception.
		 */
		uint32_t PENDSTCLR : 1;

		/*!
		 * \brief On writes, sets the SysTick exception as
		 *        pending. On reads, indicates the current state
		 *        of the exception.
		 */
		uint32_t PENDSTSET : 1;

		/*!
		 * \brief Removes the pending status of the PendSV
		 *        exception.
		 */
		uint32_t PENDSVCLR : 1;

		/*!
		 * \brief On writes, sets the PendSV exception as
		 *        pending. On reads, indicates the current state
		 *        of the exception.
		 */
		uint32_t PENDSVSET : 1;

		/*!
		 * \brief Reserved.
		 */
		uint32_t RESERVED_3 : 2;

		/*!
		 * \brief On writes, makes the NMI exception active. On
		 *        reads, indicates the state of the exception.
		 */
		uint32_t NMIPENDSET : 1;
	};
} scs_icsr_reg_t;

/*!
 * \def ICSR
 *
 * \brief Provides software control of the NMI, PendSV, and SysTick
 *        exceptions, and provides interrupt status information.
 */
#define ICSR (*((scs_icsr_reg_t *) 0xe000ed04))

/*!
 * Structure representing the CCR register.
 */
typedef union scs_ccr_reg_u
{
	/*!
	 * \brief Read or write the CCR register as a 32-bit value.
	 */
	uint32_t as_uint32_t;

	struct
	{
		/*!
		 * \brief Controls whether the processor can enter
		 *        Thread mode with exceptions active.
		 */
		uint32_t NONBASETHRDENA : 1;

		/*!
		 * \brief Controls whether unprivileged software can
		 *        access the STIR.
		 */
		uint32_t USERSETMPEND : 1;

		/*!
		 * \brief Reserved.
		 */
		uint32_t RESERVED_0 : 1;

		/*!
		 * \brief Controls the trapping of unaligned word or
		 *        halfword accesses.
		 */
		uint32_t UNALIGN_TRP : 1;

		/*!
		 * \brief Controls the trap on divide by 0.
		 */
		uint32_t DIV_0_TRP : 1;

		/*!
		 * \brief Reserved.
		 */
		uint32_t RESERVED_1 : 3;

		/*!
		 * \brief Determines the effect of precise data access
		 *        faults on handlers running at priority -1 or
		 *        priority -2.
		 */
		uint32_t BFHFNMIGN : 1;

		/*!
		 * \brief Determines whether the exception entry
		 *        sequence guarantees 8-byte stack frame
		 *        alignment, adjusting the SP if necessary
		 *        before saving state.
		 */
		uint32_t STKALIGN : 1;

		/*!
		 * \brief Reserved.
		 */
		uint32_t RESERVED_2 : 6;

		/*!
		 * \brief Cache enable bit. This is a global enable bit
		 *        for data and unified caches.
		 */
		uint32_t DC : 1;

		/*!
		 * \brief Instruction cache enable bit. This is a global
		 *        enable bit for instruction caches.
		 */
		uint32_t IC : 1;

		/*!
		 * \brief Branch prediction enable bit.
		 */
		uint32_t BP : 1;

		/*!
		 * \brief Reserved.
		 */
		uint32_t RESERVED_3 : 13;
	};
} scs_ccr_reg_t;

/*!
 * \def CCR
 *
 * \define Sets or returns configuration and control data, and provides
 *         control over caching and branch prediction.
 */
#define CCR (*((scs_ccr_reg_t *) 0xe000ed14))

/*!
 * Structure representing the MMFSR register.
 */
typedef union scs_mmfsr_reg_u
{
	/*!
	 * \brief Read or write the MMFSR register as a 8-bit value.
	 */
	uint8_t as_uint8_t;

	struct
	{
		/*!
		 * \brief MPU violation or fault caused by an
		 *        instruction fetch, or an instruction fetch
		 *        from XN memory when there is no MPU. The fault
		 *        occurs only if the processor attempts to
		 *        execute the instruction. The processor does
		 *        not update the MemManage Address Register.
		 */
		uint8_t IACCVIOL : 1;

		/*!
		 * \brief MPU violation or fault caused by an explicit
		 *        memory access. The processor writes the data
		 *        address of the load or store to the MemManage
		 *        Address Register.
		 */
		uint8_t DACCVIOL : 1;

		/*!
		 * \brief Reserved.
		 */
		uint8_t RESERVED_0 : 1;

		/*!
		 * \brief Failure on a hardware restore of context,
		 *        because of an MPU access violation. The
		 *        processor does not update the MemManage
		 *        Address Register.
		 */
		uint8_t MUNSTKERR : 1;

		/*!
		 * \brief Failure on a hardware save of context,
		 *        because of an MPU access violation. The
		 *        processor does not update the MemManage
		 *        Address Register.
		 */
		uint8_t MSTKERR : 1;

		/*!
		 * \brief Occurs on a failure to preserve the
		 *        floating-point context.
		 */
		uint8_t MLSPERR : 1;

		/*!
		 * \brief Reserved.
		 */
		uint8_t RESERVED_1 : 1;

		/*!
		 * \brief Validity of the content of the MMFAR
		 *        register.
		 */
		uint8_t MMARVALID : 1;
	};
} scs_mmfsr_reg_t;

/*!
 * Structure representing the BFSR register.
 */
typedef union scs_bfsr_reg_u
{
	/*!
	 * \brief Read or write the BFSR register as a 8-bit value.
	 */
	uint8_t as_uint8_t;

	struct
	{
		/*!
		 * \brief Bus error on an instruction fetch. The fault
		 *        occurs only if the processor attempts to
		 *        execute the instruction. The processor does
		 *        not update the Bus Fault Address Register.
		 */
		uint8_t IBUSERR : 1;

		/*!
		 * \brief Precise bus error caused by an explicit memory
		 *        access. The processor writes the data address
		 *        of the load or store to the Bus Fault Address
		 *        Register.
		 */
		uint8_t PRECISERR : 1;

		/*!
		 * \brief Imprecise bus error caused by an explicit
		 *        memory access. The processor does not update
		 *        the Bus Fault Address Register.
		 */
		uint8_t IMPRECISERR : 1;

		/*!
		 * \brief Failure on a hardware restore of context. The
		 *        fault returns a bus error, but the processor
		 *        does not update the Bus Fault Address
		 *        Register.
		 */
		uint8_t UNSTKERR : 1;

		/*!
		 * \brief Failure on a hardware save of context. The
		 *        fault returns a bus error, but the processor
		 *        does not update the BusFault Address
		 *        Register.
		 */
		uint8_t STKERR : 1;

		/*!
		 * \brief Occurs on a failure to preserve the
		 *        floating-point context.
		 */
		uint8_t LSPERR : 1;

		/*!
		 * \brief Reserved.
		 */
		uint8_t RESERVED_0 : 1;

		/*!
		 * \brief Validity of the content of the BFAR register.
		 */
		uint8_t BFARVALID : 1;
	};
} scs_bfsr_reg_t;

/*!
 * Structure representing the UFSR register.
 */
typedef union scs_ufsr_reg_u
{
	/*!
	 * \brief Read or write the UFSR register as a 16-bit value.
	 */
	uint16_t as_uint16_t;

	struct
	{
		/*!
		 * \brief Occurs if the processor attempts to execute
		 *        an unknown instruction, including any unknown
		 *        instruction associated with an enabled
		 *        coprocessor.
		 */
		uint16_t UNDEFINSTR : 1;

		/*!
		 * \brief Occurs if the processor attempts to execute in
		 *        an invalid EPSR state, for example after a BX
		 *        instruction branches to an unsupported state.
		 *        This fault includes any state change after
		 *        entry to or return from an exception, as well
		 *        as from an interworking instruction.
		 */
		uint16_t INVSTATE : 1;

		/*!
		 * \brief Indicates any failure of the integrity checks
		 *        for exception returns.
		 */
		uint16_t INVPC : 1;

		/*!
		 * \brief Occurs on an attempt to access a coprocessor
		 *        that does not exist, or to which access is
		 *        denied.
		 */
		uint16_t NOCP : 1;

		/*!
		 * \brief Reserved.
		 */
		uint16_t RESERVED_0 : 4;

		/*!
		 * \brief Occurs when a multiple word load or store
		 *        instruction attempts to access a non-word
		 *        aligned location. If the CCR.UNALIGN_TRP bit
		 *        is set to 1 it occurs, also, for any load or
		 *        store that is not naturally aligned.
		 */
		uint16_t UNALIGNED : 1;

		/*!
		 * \brief If the CCR.DIV_0_TRP bit is set to 1, this
		 *        occurs when the processor attempts to execute
		 *        SDIV or UDIV with a divisor of 0.
		 */
		uint16_t DIVBYZERO : 1;

		/*!
		 * \brief Reserved.
		 */
		uint16_t RESERVED_1 : 6;
	};
} scs_ufsr_reg_t;

/*!
 * Structure representing the CFSR register.
 */
typedef union scs_cfsr_reg_u
{
	/*!
	 * \brief Read or write the CFSR register as a 32-bit value.
	 */
	uint32_t as_uint32_t;

	struct
	{
		/*!
		 * \brief Shows the status of MPU faults.
		 */
		scs_mmfsr_reg_t MMFSR;

		/*!
		 * \brief Shows the status of bus errors resulting from
		 *        instruction prefetches and data accesses.
		 */
		scs_bfsr_reg_t BFSR;

		/*!
		 * \brief Contains the status for some instruction
		 *        execution faults, and for data access faults.
		 */
		scs_ufsr_reg_t UFSR;
	};
} scs_cfsr_reg_t;

/*!
 * \def CFSR
 *
 * \brief Contains the three Configurable Fault Status Registers.
 */
#define CFSR (*((scs_cfsr_reg_t *) 0xe000ed28))

/*!
 * Structure representing the MMFAR register.
 */
typedef union scs_mmfar_reg_u
{
	/*!
	 * \brief Read or write the MMFAR register as a 32-bit value.
	 */
	uint32_t as_uint32_t;

	struct
	{
		/*!
		 * \brief Data address for an MPU fault.
		 */
		uint32_t ADDRESS : 32;
	};
} scs_mmfar_reg_t;

/*!
 * \def MMFAR
 *
 * \brief Shows the address of the memory location that caused an MPU
 *        fault.
 */
#define MMFAR (*((scs_mmfar_reg_t *) 0xe000ed34))

/*!
 * Structure representing the BFAR register.
 */
typedef union scs_bfar_reg_u
{
	/*!
	 * \brief Read or write the BFAR register as a 32-bit value.
	 */
	uint32_t as_uint32_t;

	struct
	{
		/*!
		 * \brief Data address for a precise bus fault.
		 */
		uint32_t ADDRESS : 32;
	};
} scs_bfar_reg_t;

/*!
 * \def BFAR
 *
 * \brief Shows the address associated with a precise data access fault.
 */
#define BFAR (*((scs_bfar_reg_t *) 0xe000ed38))

/*!
 * Structure representing the SYST_CSR register.
 */
typedef union scs_syst_csr_u
{
	/*!
	 * \brief Read or write the SYST_CSR register as a 32-bit value.
	 */
	uint32_t as_uint32_t;

	struct
	{
		/*!
		 * \brief Indicates the enabled status of the SysTick
		 *        counter.
		 */
		uint32_t ENABLE : 1;

		/*!
		 * \brief Indicates whether counting to 0 causes the
		 *        status of the SysTick exception to change to
		 *        pending.
		 */
		uint32_t TICKINT : 1;

		/*!
		 * \brief Indicates the SysTick clock source.
		 */
		uint32_t CLKSOURCE : 1;

		/*!
		 * \brief Reserved.
		 */
		uint32_t RESERVED_0 : 13;

		/*!
		 * \brief Indicates whether the counter has counted to 0
		 *        since the last read of this register.
		 */
		uint32_t COUNTFLAG : 1;

		/*!
		 * \brief Reserved.
		 */
		uint32_t RESERVED_1 : 15;
	};
} scs_syst_csr_t;

/*!
 * \def SYST_CSR
 *
 * \brief Controls the system timer and provides status data.
 */
#define SYST_CSR (*((scs_syst_csr_t *) 0xe000e010))

/*!
 * Structure representing the SYST_RVR register.
 */
typedef union scs_syst_rvr_u
{
	/*!
	 * \brief Read or write the SYST_RVR register as a 32-bit value.
	 */
	uint32_t as_uint32_t;

	struct
	{
		/*!
		 * \brief The value to load into the SYST_CVR when the
		 *        counter reaches 0.
		 */
		uint32_t RELOAD : 24;

		/*!
		 * \brief Reserved, RAZ/WI.
		 */
		uint32_t RESERVED_0 : 8;
	};
} scs_syst_rvr_t;

/*!
 * \def SYST_RVR
 *
 * \brief Holds the reload value of the SYST_CVR.
 */
#define SYST_RVR (*((scs_syst_rvr_t *) 0xe000e014))

/*!
 * Structure representing the SYST_CVR register.
 */
typedef union scs_syst_cvr_u
{
	/*!
	 * \brief Read or write the SYST_CVR register as a 32-bit value.
	 */
	uint32_t as_uint32_t;

	struct
	{
		/*!
		 * \brief Current counter value.
		 */
		uint32_t CURRENT : 32;
	};
} scs_syst_cvr_t;

/*!
 * \def SYST_CVR
 *
 * \brief Reads or clears the current counter value.
 */
#define SYST_CVR (*((scs_syst_cvr_t *) 0xe000e018))

/*!
 * Structure representing the SYST_CALIB register.
 */
typedef union scs_syst_calib_u
{
	/*!
	 * \brief Read or write the SYST_CALIB register as a 32-bit
	 *        value.
	 */
	uint32_t as_uint32_t;

	struct
	{
		/*!
		 * \brief Optionally, holds a reload value to be used
		 *        for 10ms (100Hz) timing, subject to system
		 *        clock skew errors. If this field is zero, the
		 *        calibration value is not known.
		 */
		uint32_t TENMS : 24;

		/*!
		 * \brief Reserved.
		 */
		uint32_t RESERVED_0 : 6;

		/*!
		 * \brief Indicates whether the 10ms calibration value
		 *        is exact.
		 */
		uint32_t SKEW : 1;

		/*!
		 * \brief Indicates whether the IMPLEMENTATION DEFINED
		 * reference clock is implemented.
		 */
		uint32_t NOREF : 1;
	};
} scs_syst_calib_t;

/*!
 * \def SYST_CALIB
 *
 * \brief Reads the calibration value and parameters for SysTick.
 */
#define SYST_CALIB (*((scs_syst_calib_t *) 0xe000e01c))

#endif /* __SCS_H__ */
